const request = require('request');
const config = require('config');

const enduserDB = require('../object/enduserDB');

const PAGE_ACCESS_TOKEN = config.get('PAGE_ACCESS_TOKEN');
const GROUP_ID = config.get('GROUP_ID');
const fbApi = require('./api');

exports.handleMessage = (sender_psid, received_message) => {
  enduserDB.findUser({ psid: sender_psid }, (users) => {
    const user = users[0];
    if (user.isFinding) {
      const response = {
        "attachment": {
          "type": "template",
          "payload": {
            "template_type": "button",
            "text": "M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ^^",
            "buttons": [
              {
                "type": "postback",
                "title": "Ng∆∞ng t√¨m g·∫•u üêª",
                "payload": "CANCEL_FINDING"
              }
            ]
          }
        }
      }
      this.callSendAPI(sender_psid, response);
    } else if (user.isChatting) {
      if (received_message.text) {
        const response = {
          text: received_message.text
        }

        let promise = new Promise((resolve, reject) => {
          this.sendActions(user.chatWith, 'mark_seen');
          resolve();
        }).then(() => {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              this.sendActions(user.chatWith, 'typing_on');
              resolve();
            }, 100);
          });
        }).then(() => {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              this.sendActions(user.chatWith, 'typing_off');
              resolve();
            }, received_message.text.length * 80);
          });
        }).then(() => {
          this.callSendAPI(user.chatWith, response);
        });        
      } else if (received_message.attachments) {
        console.log(received_message.attachments);
        let response = {
          attachment: received_message.attachments[0]
        }
        if (response.attachment.payload.sticker_id) {
          delete response.attachment.payload.sticker_id;
        }
        this.callSendAPI(user.chatWith, response);
      }
    } else {
      response = {
        "attachment": {
          "type": "template",
          "payload": {
            "template_type": "button",
            "text": "M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ^^",
            "buttons": [
              {
                "type": "postback",
                "title": "T√¨m g·∫•u üêª",
                "payload": "FIND_FRIEND"
              }
            ]
          }
        }
      }
      this.callSendAPI(sender_psid, response);
    }
  });
}

exports.handlePostback = (sender_psid, received_postback) => {
  enduserDB.findUser({ psid: sender_psid }, async (users) => {
    const user = users[0];
    switch (received_postback.payload) {
      case 'GET_STARTED':
      case 'ASSISTANT':
        if (user.isFinding) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ^^",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "Ng∆∞ng t√¨m g·∫•u üêª",
                    "payload": "CANCEL_FINDING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ^^",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "K·∫øt th√∫c tr√≤ chuy·ªán",
                    "payload": "CANCEL_CHATTING"
                  }, {
                    "type": "postback",
                    "title": "B√°o c√°o ng∆∞·ªùi d√πng",
                    "payload": "REPORT"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? ^^",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "T√¨m g·∫•u üêª",
                    "payload": "FIND_FRIEND"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'FIND_FRIEND':
        if (user.isFinding) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": 'ƒêang t√¨m g·∫•u üêª...b·∫°n vui l√≤ng ƒë·ª£i trong khi bot t√¨m cho b·∫°n nha!',
                "buttons": [
                  {
                    "type": "postback",
                    "title": "Ng∆∞ng t√¨m g·∫•u üêª",
                    "payload": "CANCEL_FINDING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": 'Kh√¥ng th·ªÉ t√¨m g·∫•u m·ªõi khi b·∫°n ƒëang chat. N·∫øu mu·ªën t√¨m g·∫•u m·ªõi, g√µ "pp" ho·∫∑c b·∫•m "K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán" ƒë·ªÉ k·∫øt th√∫c tr√≤ chuy·ªán!',
                "buttons": [
                  {
                    "type": "postback",
                    "title": "K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán",
                    "payload": "CANCEL_CHATTING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          await enduserDB.updateUser(user.gender === 'male' ? 'male' : 'female', { psid: sender_psid }, { $set: { isFinding: true, isChatting: false, chatWith: '' } }, null);
          await enduserDB.aggregateUser(user.gender !== 'male' ? 'male' : 'female', [{ $match: { psid: { $ne: sender_psid }, isFinding: true, isChatting: false, gender: { $ne: user.gender } } }, { $sample: { size: 1 } }], async usersList => {
            if (usersList.length === 0) {
              const response = {
                "attachment": {
                  "type": "template",
                  "payload": {
                    "template_type": "button",
                    "text": 'ƒêang t√¨m g·∫•u üêª...b·∫°n vui l√≤ng ƒë·ª£i trong khi bot t√¨m cho b·∫°n nha!',
                    "buttons": [
                      {
                        "type": "postback",
                        "title": "Ng∆∞ng t√¨m g·∫•u üêª",
                        "payload": "CANCEL_FINDING"
                      }
                    ]
                  }
                }
              }
              await this.callSendAPI(sender_psid, response);
            } else {
              let randomUser = usersList[Math.floor(Math.random() * usersList.length)];

              await enduserDB.updateUser(user.gender === 'male' ? 'male' : 'female', { psid: sender_psid }, { $set: { isFinding: false, isChatting: true, chatWith: randomUser.psid } }, null);
              await enduserDB.updateUser(randomUser.gender === 'male' ? 'male' : 'female', { psid: randomUser.psid }, { $set: { isFinding: false, isChatting: true, chatWith: sender_psid } }, null);

              const response = {
                "text": 'M√¨nh ƒë√£ t√¨m th·∫•y m·ªôt ch√∫ g·∫•u üêª Ch√∫c b·∫°n c√≥ cu·ªôc tr√≤ chuy·ªán vui v·∫ª ^^!',
              }
              await this.callSendAPI(randomUser.psid, response);
              await this.callSendAPI(sender_psid, response);
            }
          });
        }
        break;
      case 'CANCEL_FINDING':
        if (user.isFinding) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "B·∫°n c√≥ mu·ªën ng∆∞ng t√¨m ki·∫øm?",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "ƒê·ªìng √Ω",
                    "payload": "ACCEPT_CANCEL_FINDING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi b·∫°n ƒëang chat ^^"
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'CANCEL_CHATTING':
        if (user.isFinding) {
          response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi ƒëang t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "B·∫°n c√≥ mu·ªën ng∆∞ng cu·ªôc tr√≤ chuy·ªán? L∆∞u √Ω b·∫°n s·∫Ω kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i ƒë∆∞·ª£c v·ªõi ch√∫ g·∫•u n√†y",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "ƒê·ªìng √Ω",
                    "payload": "ACCEPT_CANCEL_CHATTING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'REPORT':
        if (user.isFinding) {
          response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi ƒëang t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": "B·∫°n c√≥ mu·ªën b√°o c√°o t√™n g·∫•u n√†y? Sau khi b√°o c√°o, ch√∫ng t√¥i s·∫Ω ki·ªÉm tra v√† quy·∫øt ƒë·ªãnh block t√™n n√†y!",
                "buttons": [
                  {
                    "type": "postback",
                    "title": "ƒê·ªìng √Ω",
                    "payload": "ACCEPT_REPORTING"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng chat v·ªõi ai ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'ACCEPT_CANCEL_FINDING':
        if (user.isFinding) {
          await enduserDB.updateUser(user.gender === 'male' ? 'male' : 'female', { psid: sender_psid }, { $set: { isFinding: false, isChatting: false, chatWith: '' } }, null);
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": 'B·∫°n ƒë√£ ng∆∞ng t√¨m ki·∫øm ^^ B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c t√¨m ki·∫øm ƒë·ªëi b·∫±ng c√°ch b·∫•m v√†o "T√¨m g·∫•u üêª"',
                "buttons": [
                  {
                    "type": "postback",
                    "title": "T√¨m g·∫•u üêª",
                    "payload": "FIND_FRIEND"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "text": "Kh√¥ng th·ªÉ thao t√°c khi b·∫°n ƒëang ·ªü trong cu·ªôc tr√≤ chuy·ªán!"
          }
          await this.callSendAPI(sender_psid, response);
        } else {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'ACCEPT_CANCEL_CHATTING':
        if (user.isFinding) {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi ƒëang t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          await enduserDB.updateUser(user.gender === 'male' ? 'male' : 'female', { psid: sender_psid }, { $set: { isFinding: false, isChatting: false, chatWith: '' } }, null);
          await enduserDB.updateUser(user.gender !== 'male' ? 'male' : 'female', { psid: user.chatWith }, { $set: { isFinding: false, isChatting: false, chatWith: '' } }, null);
          const response = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": 'B·∫°n ƒë√£ k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán ch√∫ g·∫•u n√†y üò¢ B·∫°n c√≥ mu·ªën t√¨m g·∫•u kh√°c?',
                "buttons": [
                  {
                    "type": "postback",
                    "title": "T√¨m g·∫•u üêª",
                    "payload": "FIND_FRIEND"
                  }
                ]
              }
            }
          }

          const response2 = {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": 'Ch√∫ g·∫•u n√†y ƒë√£ k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán üò¢ B·∫°n c√≥ mu·ªën t√¨m g·∫•u kh√°c?',
                "buttons": [
                  {
                    "type": "postback",
                    "title": "T√¨m g·∫•u üêª",
                    "payload": "FIND_FRIEND"
                  }
                ]
              }
            }
          }
          await this.callSendAPI(sender_psid, response);
          await this.callSendAPI(user.chatWith, response2);
        } else {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
      case 'ACCEPT_REPORTING':
        if (user.isFinding) {
          response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi ƒëang t√¨m g·∫•u ^^"
          }
          await this.callSendAPI(sender_psid, response);
        } else if (user.isChatting) {
          const response = {
            "text": "C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n. Ch√∫ng t√¥i s·∫Ω ki·ªÉm tra ng∆∞·ªùi d√πng n√†y v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh!"
          }
          await enduserDB.updateUser(user.gender === 'male' ? 'female' : 'male', )
          await this.callSendAPI(sender_psid, response);
        } else {
          const response = {
            "text": "Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c trong khi kh√¥ng chat v·ªõi ai ^^"
          }
          await this.callSendAPI(sender_psid, response);
        }
        break;
    }
  });
}

exports.callSendAPI = (sender_psid, response) => {
  let request_body = {
    "recipient": {
      "id": sender_psid
    },
    "message": JSON.stringify(response)
  }

  request({
    "uri": "https://graph.facebook.com/v3.3/me/messages",
    "qs": { "access_token": PAGE_ACCESS_TOKEN },
    "method": "POST",
    "json": request_body
  }, (err, res, body) => {
    if (!err) {
      console.log('body response: ', JSON.stringify(body));
    } else {
      console.error('Unable to send message:', err);
    }
  });
}

exports.sendActions = (sender_psid, type) => {
  let request_body = {
    "recipient": {
      "id": sender_psid
    },
    "sender_action": type
  }

  request({
    "uri": "https://graph.facebook.com/v3.3/me/messages",
    "qs": { "access_token": PAGE_ACCESS_TOKEN },
    "method": "POST",
    "json": request_body
  }, (err, res, body) => {
    if (!err) {
      console.log('body response: ', JSON.stringify(body));
    } else {
      console.error('Unable to send message:', err);
    }
  });
}